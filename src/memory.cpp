#include <string>
#include <fstream>
#include <cstring>

#include "memory.hpp"

using namespace std;

uint8_t font[] = {
    0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
    0x20, 0x60, 0x20, 0x20, 0x70, // 1
    0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
    0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
    0x90, 0x90, 0xF0, 0x10, 0x10, // 4
    0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
    0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
    0xF0, 0x10, 0x20, 0x40, 0x40, // 7
    0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
    0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
    0xF0, 0x90, 0xF0, 0x90, 0x90, // A
    0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
    0xF0, 0x80, 0x80, 0x80, 0xF0, // C
    0xE0, 0x90, 0x90, 0x90, 0xE0, // D
    0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
    0xF0, 0x80, 0xF0, 0x80, 0x80  // F
};

Memory::~Memory() {
    delete memory;
}

Memory::Memory(string path) {
    //Read the rom
    ifstream romFile;
    romFile.open(path, ofstream::binary);
    romFile.seekg(0, romFile.end);
    int romLen = romFile.tellg();
    romFile.seekg(0, romFile.beg);
    char* rom = new char[romLen];
    romFile.read(rom, romLen);
    romFile.close();
    
    //Memory
    memory = new uint8_t[memorySize];
    memset(memory, 0, memorySize);
    memcpy(&memory[fontStart], font, sizeof(font));
    memcpy(&memory[romStart], rom, romLen);

    //Stack and registers
    stack = new uint16_t[stackSize];
    registers = new uint8_t[16];
    memset(stack, 0, sizeof(stack));
    memset(registers, 0, sizeof(registers));

    pc = romStart;
}